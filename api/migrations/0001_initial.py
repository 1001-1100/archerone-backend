# Generated by Django 3.0.5 on 2020-09-01 22:13

import api.managers
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('id_num', models.IntegerField(null=True, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('first_time_user', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField()),
                ('is_admin', models.BooleanField()),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', api.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bldg_code', models.CharField(max_length=50, unique=True)),
                ('bldg_name', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'building',
                'verbose_name_plural': 'buildings',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idnum', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('classnumber', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'cart',
                'verbose_name_plural': 'carts',
            },
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college_code', models.CharField(max_length=12, unique=True)),
                ('college_name', models.CharField(max_length=120, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'college',
                'verbose_name_plural': 'colleges',
            },
        ),
        migrations.CreateModel(
            name='CoordinateSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shareCode', models.TextField()),
                ('serializedSchedules', models.BinaryField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=8, unique=True)),
                ('course_name', models.CharField(blank=True, max_length=120)),
                ('course_desc', models.TextField(blank=True)),
                ('units', models.IntegerField(blank=True, default=3, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('academic', models.BooleanField(default=True)),
                ('co_requisite', models.ManyToManyField(blank=True, related_name='_course_co_requisite_+', to='api.Course')),
                ('college', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.College')),
                ('prerequisite_to', models.ManyToManyField(blank=True, related_name='prerequisite', to='api.Course')),
                ('soft_prerequisite_to', models.ManyToManyField(blank=True, related_name='softprereq', to='api.Course')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
            },
        ),
        migrations.CreateModel(
            name='CourseOffering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classnumber', models.IntegerField()),
                ('current_enrolled', models.IntegerField(blank=True, null=True)),
                ('max_enrolled', models.IntegerField(blank=True, null=True)),
                ('status', models.BooleanField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Course')),
            ],
            options={
                'verbose_name': 'course offering',
                'verbose_name_plural': 'course offerings',
            },
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_code', models.CharField(max_length=3, unique=True)),
                ('day_name', models.CharField(max_length=10, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'day',
                'verbose_name_plural': 'days',
            },
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_code', models.CharField(max_length=8, unique=True)),
                ('degree_name', models.CharField(max_length=120, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.College')),
            ],
            options={
                'verbose_name': 'degree',
                'verbose_name_plural': 'degrees',
            },
        ),
        migrations.CreateModel(
            name='Enlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idnum', models.CharField(max_length=100)),
                ('allowed', models.BooleanField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'enlist',
                'verbose_name_plural': 'enlists',
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'faculty member',
                'verbose_name_plural': 'faculty members',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_code', models.CharField(max_length=6, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'section',
                'verbose_name_plural': 'sections',
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField()),
            ],
            options={
                'verbose_name': 'survey',
                'verbose_name_plural': 'surveys',
            },
        ),
        migrations.CreateModel(
            name='Timeslot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'timeslot',
                'verbose_name_plural': 'timeslots',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('courseOfferings', models.ManyToManyField(to='api.CourseOffering')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'schedule',
                'verbose_name_plural': 'schedules',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(blank=True, max_length=255, unique=True)),
                ('room_type', models.CharField(blank=True, max_length=255)),
                ('room_capacity', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Building')),
            ],
            options={
                'verbose_name': 'room',
                'verbose_name_plural': 'rooms',
            },
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earliest_class_time', models.TimeField(null=True, verbose_name='earliest class time')),
                ('latest_class_time', models.TimeField(null=True, verbose_name='latest class time')),
                ('break_length', models.IntegerField(null=True, verbose_name='break length')),
                ('min_courses', models.IntegerField(null=True, verbose_name='min courses per day')),
                ('max_courses', models.IntegerField(null=True, verbose_name='max courses per day')),
                ('preferred_sections', models.TextField(null=True)),
                ('undesirable_classes', models.IntegerField(null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('preferred_buildings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Building')),
                ('preferred_days', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Day')),
                ('preferred_faculty', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Faculty')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'preference',
                'verbose_name_plural': 'preferences',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=500)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('seen', models.BooleanField(default=False)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seen', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('accepted', models.BooleanField(default=False)),
                ('notified', models.BooleanField(default=False)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FlowchartTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch', models.CharField(max_length=6)),
                ('tracks', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.int_list_validator])),
                ('year', models.IntegerField()),
                ('term', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('courses', models.ManyToManyField(to='api.Course')),
                ('degree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Degree')),
            ],
            options={
                'verbose_name': 'flowchart term',
                'verbose_name_plural': 'flowchart terms',
            },
        ),
        migrations.CreateModel(
            name='CoursePriority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.BooleanField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('courses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'course priority',
                'verbose_name_plural': 'course priorities',
            },
        ),
        migrations.AddField(
            model_name='courseoffering',
            name='day',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Day'),
        ),
        migrations.AddField(
            model_name='courseoffering',
            name='faculty',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Faculty'),
        ),
        migrations.AddField(
            model_name='courseoffering',
            name='room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Room'),
        ),
        migrations.AddField(
            model_name='courseoffering',
            name='section',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Section'),
        ),
        migrations.AddField(
            model_name='courseoffering',
            name='timeslot',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Timeslot'),
        ),
        migrations.AddField(
            model_name='user',
            name='college',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.College'),
        ),
        migrations.AddField(
            model_name='user',
            name='degree',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Degree'),
        ),
        migrations.AddField(
            model_name='user',
            name='friends',
            field=models.ManyToManyField(blank=True, related_name='_user_friends_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
